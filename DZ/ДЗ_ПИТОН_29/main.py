"""
ЗАДАНИЕ  (на выбор 1 или 2, или 1 и 2) 

1.
Реализуйте класс Student и класс Aspirant, аспирант отличается от студента наличием некой научной работы.
Класс Student содержит переменные: String firstName, lastName, group. 
А также, double averageMark, содержащую среднюю оценку.
Создать метод getScholarship() для класса Student, который возвращает сумму стипендии. 
Если средняя оценка студента равна 5, то сумма 2000, иначе 1900. Переопределить этот метод в классе Aspirant.  
Если средняя оценка аспиранта равна 5, то сумма 2500, иначе 2200.
Создать массив типа Student, содержащий объекты класса Student и Aspirant. 
Вызвать метод getScholarship() для каждого элемента массива.
●	НЕОБЯЗАТЕЛЬНО ->Усложнение сделать через наследование 

2.
Создать класс Person, который содержит: 
переменные fullName, age - должны быть закрыты;
методы move() и talk(), в которых просто вывести на консоль сообщение -"Такой-то  Person говорит". 
создайте геттеры и сеттеры для закрытых полей класса
Создайте два объекта этого класса. 
Вызовите методы move() и talk().
"""

# ------------------------------- 2 Создаю класс Person ----------------------------------------- #
class Person:                                                                                     #
    def __init__(self, fullName, age: int):                                                       #
        self.__fullName = fullName                                                                #
        self.__age = age                                                                          #
                                                                                                  #
    @property                                                                                     #
    def getName (self): return self.__fullName                                                    #
    def setName (self, name): self.__fullName = name                                              #
                                                                                                  #
                                                                                                  #
    @property                                                                                     #
    def getAge (self): return self.__age                                                          #
    def setAge (self, num): self.__age += num                                                     #
                                                                                                  #
    def move(self): return self.__fullName + " двигается"                                         #
                                                                                                  #
    def talk(self): return self.__fullName + " говорит"                                           #
# ----------------------------------------------------------------------------------------------- #

# ----------------------------------- Создаем 2 объекта ----------------------------------------- #
person1 = Person('Иван',40)                                                                       #
print(person1.talk(),'\n',person1.move())                                                         #
                                                                                                  #
person2 = Person('Петр',38)                                                                       #
print(person2.talk(),'\n',person2.move())                                                         #
# ----------------------------------------------------------------------------------------------- #
